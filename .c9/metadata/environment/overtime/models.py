{"filter":false,"title":"models.py","tooltip":"/overtime/models.py","undoManager":{"mark":21,"position":21,"stack":[[{"start":{"row":0,"column":28},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":42},"action":"insert","lines":["from account.models import Account","from clocking.models import Quarter, Shift"],"id":3}],[{"start":{"row":5,"column":0},"end":{"row":18,"column":80},"action":"insert","lines":["class Overtime(models.Model):","    ot_officer_id = models.ForeignKey(Account, related_name='ot_officer_id', on_delete=models.CASCADE)","    ot_qtr_id = models.ForeignKey(Quarter, related_name='ot_qtr_id', on_delete=models.CASCADE)","    ot_date = models.DateField(blank=True, null=True)","    ot_shift_id = models.ForeignKey(Shift, related_name='ot_shift_id', on_delete=models.CASCADE)","    ot_recall = models.BooleanField(default=False)","    ot_requirement = models.BooleanField(default=False)","    date_created = models.DateTimeField(auto_now_add=True)","    ","    def __unicode__(self):","        return self.ot_date","        ","    def __str__(self):","        return str(self.ot_officer_id) + \" has overtime on \" + str(self.ot_date)"],"id":4}],[{"start":{"row":18,"column":80},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":5},{"start":{"row":19,"column":0},"end":{"row":19,"column":8},"action":"insert","lines":["        "]},{"start":{"row":19,"column":8},"end":{"row":20,"column":0},"action":"insert","lines":["",""]},{"start":{"row":20,"column":0},"end":{"row":20,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":20,"column":4},"end":{"row":20,"column":8},"action":"remove","lines":["    "],"id":6},{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":20,"column":0},"end":{"row":33,"column":98},"action":"insert","lines":["class ShortOvertime(models.Model):","    short_ot_officer_id = models.ForeignKey(Account, related_name='short_ot_officer_id', on_delete=models.CASCADE)","    short_ot_qtr_id = models.ForeignKey(Quarter, related_name='short_ot_qtr_id', on_delete=models.CASCADE)","    short_ot_date = models.DateField(blank=False, null=False)","    short_ot_start_time = models.TimeField(blank=False, null=False)","    short_ot_end_time = models.TimeField(blank=False, null=False)","    overtime_hours = models.FloatField(blank=True, null=True)","    date_created = models.DateTimeField(auto_now_add=True)","    ","    def __unicode__(self):","        return self.short_ot_date","        ","    def __str__(self):","        return str(self.short_ot_officer_id) + \" has short overtime on \" + str(self.short_ot_date)"],"id":7}],[{"start":{"row":33,"column":98},"end":{"row":34,"column":0},"action":"insert","lines":["",""],"id":8},{"start":{"row":34,"column":0},"end":{"row":34,"column":8},"action":"insert","lines":["        "]},{"start":{"row":34,"column":8},"end":{"row":35,"column":0},"action":"insert","lines":["",""]},{"start":{"row":35,"column":0},"end":{"row":35,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":35,"column":4},"end":{"row":35,"column":8},"action":"remove","lines":["    "],"id":9},{"start":{"row":35,"column":0},"end":{"row":35,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":35,"column":0},"end":{"row":45,"column":82},"action":"insert","lines":["class OvertimePerQtr(models.Model):","    ot_per_qtr_off_id = models.ForeignKey(Account, related_name='ot_per_qtr_off_id', on_delete=models.CASCADE)","    ot_per_qtr_qtr_id = models.ForeignKey(Quarter, related_name='ot_per_qtr_qtr_id', on_delete=models.CASCADE)","    ot_hours_completed = models.FloatField(blank=False, null=False, default=0.0)","    avail_window_open = models.BooleanField(default=False)","    ","    def __unicode__(self):","        return self.ot_per_qtr_qtr_id","        ","    def __str__(self):","        return str(self.ot_per_qtr_off_id) + \" for \" + str(self.ot_per_qtr_qtr_id)"],"id":10}],[{"start":{"row":45,"column":82},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":46,"column":0},"end":{"row":46,"column":8},"action":"insert","lines":["        "]},{"start":{"row":46,"column":8},"end":{"row":47,"column":0},"action":"insert","lines":["",""]},{"start":{"row":47,"column":0},"end":{"row":47,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":47,"column":4},"end":{"row":47,"column":8},"action":"remove","lines":["    "],"id":12},{"start":{"row":47,"column":0},"end":{"row":47,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":47,"column":0},"end":{"row":70,"column":96},"action":"insert","lines":["class AvailabilitySheet(models.Model):","    avail_sheet_off_id = models.ForeignKey(Account, related_name='avail_sheet_off_id', on_delete=models.CASCADE)","    avail_sheet_qtr_id = models.ForeignKey(Quarter, related_name='avail_sheet_qtr_id', on_delete=models.CASCADE)","    mon_one = models.DateField(blank=False, null=False)","    mon_two = models.DateField(blank=False, null=False)","    tue_one = models.DateField(blank=False, null=False)","    tue_two = models.DateField(blank=False, null=False)","    wed_one = models.DateField(blank=False, null=False)","    wed_two = models.DateField(blank=False, null=False)","    thurs_one = models.DateField(blank=False, null=False)","    thurs_two = models.DateField(blank=False, null=False)","    fri_one = models.DateField(blank=False, null=False)","    fri_two = models.DateField(blank=False, null=False)","    sat_one = models.DateField(blank=False, null=False)","    sat_two = models.DateField(blank=False, null=False)","    sun_one = models.DateField(blank=False, null=False)","    sun_two = models.DateField(blank=False, null=False)","    avail_sheet_date_submitted = models.DateField(auto_now_add=True)","    ","    def __unicode__(self):","        return self.avail_sheet_qtr_id","        ","    def __str__(self):","        return str(self.avail_sheet_off_id) + \" avail sheet for \" + str(self.avail_sheet_qtr_id)"],"id":13}],[{"start":{"row":70,"column":96},"end":{"row":71,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":71,"column":0},"end":{"row":71,"column":8},"action":"insert","lines":["        "]},{"start":{"row":71,"column":8},"end":{"row":72,"column":0},"action":"insert","lines":["",""]},{"start":{"row":72,"column":0},"end":{"row":72,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":72,"column":4},"end":{"row":72,"column":8},"action":"remove","lines":["    "],"id":15},{"start":{"row":72,"column":0},"end":{"row":72,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":72,"column":0},"end":{"row":85,"column":102},"action":"insert","lines":["class ShortTermAvailabilty(models.Model):","    st_availability_off_id = models.ForeignKey(Account, related_name='st_availability_off_id', on_delete=models.CASCADE)","    st_availability_qtr_id = models.ForeignKey(Quarter, related_name='st_availability_qtr_id', on_delete=models.CASCADE)","    st_availability_date = models.DateField(blank=False, null=False)","    #part_day - boolean","    #full_day - boolean","    #part_day_start - timefield","    #part_day_end - timefield","    ","    def __unicode__(self):","        return self.st_availability_qtr_id","        ","    def __str__(self):","        return str(self.st_availability_off_id) + \" st available on \" + str(self.st_availability_date)"],"id":16}],[{"start":{"row":76,"column":4},"end":{"row":79,"column":29},"action":"remove","lines":["#part_day - boolean","    #full_day - boolean","    #part_day_start - timefield","    #part_day_end - timefield"],"id":17},{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"remove","lines":["    "]},{"start":{"row":75,"column":68},"end":{"row":76,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":81,"column":102},"end":{"row":82,"column":0},"action":"insert","lines":["",""],"id":18},{"start":{"row":82,"column":0},"end":{"row":82,"column":8},"action":"insert","lines":["        "]},{"start":{"row":82,"column":8},"end":{"row":83,"column":0},"action":"insert","lines":["",""]},{"start":{"row":83,"column":0},"end":{"row":83,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":83,"column":4},"end":{"row":83,"column":8},"action":"remove","lines":["    "],"id":19},{"start":{"row":83,"column":0},"end":{"row":83,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":83,"column":0},"end":{"row":100,"column":81},"action":"insert","lines":["class NonScheduledOvertimeRequest(models.Model):","    nsot_off_id = models.ForeignKey(Account, related_name='nsot_off_id', on_delete=models.CASCADE)","    nsot_date = models.DateField(blank=False, null=False)","    nsot_start_time = models.TimeField(blank=False, null=False)","    nsot_end_time = models.TimeField(blank=False, null=False)","    ot_hours_claimed = models.FloatField(blank=True, null=True)","    nsot_task = models.CharField(max_length=600, blank=False, null=False)","    directed_by = models.CharField(max_length=600, blank=False, null=False)","    nsot_date_submitted = models.DateField(auto_now_add=True)","    nsot_checked_by_validator = models.BooleanField(default=False)","    nsot_accepted = models.BooleanField(default=False)","    reason_nsot_rejected = models.CharField(max_length=600, blank=True, null=True)","    ","    def __unicode__(self):","        return self.nsot_date","        ","    def __str__(self):","        return str(self.nsot_off_id) + \" nsot request for \" + str(self.nsot_date)"],"id":20}],[{"start":{"row":100,"column":81},"end":{"row":101,"column":0},"action":"insert","lines":["",""],"id":21},{"start":{"row":101,"column":0},"end":{"row":101,"column":8},"action":"insert","lines":["        "]},{"start":{"row":101,"column":8},"end":{"row":102,"column":0},"action":"insert","lines":["",""]},{"start":{"row":102,"column":0},"end":{"row":102,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":102,"column":4},"end":{"row":102,"column":8},"action":"remove","lines":["    "],"id":22},{"start":{"row":102,"column":0},"end":{"row":102,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":102,"column":0},"end":{"row":123,"column":96},"action":"insert","lines":["class AllowancesRequest(models.Model):","    allow_req_off_id = models.ForeignKey(Account, related_name='allow_req_off_id', on_delete=models.CASCADE)","    allow_req_task = models.CharField(max_length=600, blank=False, null=False)","    allow_req_date = models.DateField(blank=False, null=False)","    claiming_breakfast_allowance = models.BooleanField(default=False)","    claiming_dinner_allowance = models.BooleanField(default=False)","    claiming_tea_allowance = models.BooleanField(default=False)","    claiming_plain_clothes_allowance = models.BooleanField(default=False)","    claiming_food_for_prisoner_expense = models.BooleanField(default=False)","    food_for_prisoner_amount = models.FloatField(blank=True, null=True)","    receipt_for_prisoner_food = models.ImageField(upload_to='food_receipts_images', blank=True, null=True)","    claim_total = models.FloatField(blank=True, null=True)","    allow_req_date_submitted = models.DateField(auto_now_add=True)","    allow_req_checked_by_validator = models.BooleanField(default=False)","    allow_req_accepted = models.BooleanField(default=False)","    reason_allowance_req_rejected = models.CharField(max_length=600, blank=True, null=True)","    ","    def __unicode__(self):","        return self.allow_req_date","        ","    def __str__(self):","        return str(self.allow_req_off_id) + \" allowance request for \" + str(self.allow_req_date)"],"id":23}]]},"ace":{"folds":[],"scrolltop":1351,"scrollleft":0,"selection":{"start":{"row":123,"column":96},"end":{"row":123,"column":96},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":95,"state":"start","mode":"ace/mode/python"}},"timestamp":1605857732234,"hash":"a6877c4e4d19ded03c8e9ef76caeb1f5a64c6a9f"}