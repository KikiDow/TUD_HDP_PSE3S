{"filter":false,"title":"forms.py","tooltip":"/overtime/forms.py","undoManager":{"mark":58,"position":58,"stack":[[{"start":{"row":0,"column":0},"end":{"row":9,"column":29},"action":"insert","lines":["from django import forms","from django.db.models import Q","from .models import AvailabilitySheet, NonScheduledOvertimeRequest, AllowancesRequest","from .utils import getNextQtr, getCurrentQtr, getQtrDateIn","#from .views import val","from clocking.models import Roster, Shift","from account.models import Account","from django_currentuser.middleware import get_current_user, get_current_authenticated_user","import datetime as dt","from datetime import datetime"],"id":1}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":23},"action":"remove","lines":["#from .views import val"],"id":2},{"start":{"row":3,"column":58},"end":{"row":4,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":8,"column":29},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":10,"column":0},"end":{"row":64,"column":175},"action":"insert","lines":["class AvailabilitySheetForm(forms.ModelForm):","    def __init__(self, *args, **kwargs):","        super(AvailabilitySheetForm, self).__init__(*args, **kwargs)","        user_as_simpleLazyObject = get_current_user()","        user = Account.objects.get(pk=user_as_simpleLazyObject.id)","        #print(user)","        next_qtr = getNextQtr()","        #print(next_qtr)","        monday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=2)","        monday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in monday_query]","        self.fields['mon_one'] = forms.ChoiceField(widget=forms.Select, choices=monday_query_choices)","        self.fields['mon_two'] = forms.ChoiceField(widget=forms.Select, choices=monday_query_choices)","        tuesday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=3)","        tuesday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in tuesday_query]","        self.fields['tue_one'] = forms.ChoiceField(widget=forms.Select, choices=tuesday_query_choices)","        self.fields['tue_two'] = forms.ChoiceField(widget=forms.Select, choices=tuesday_query_choices)","        wednesday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=4)","        wednesday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in wednesday_query]","        self.fields['wed_one'] = forms.ChoiceField(widget=forms.Select, choices=wednesday_query_choices)","        self.fields['wed_two'] = forms.ChoiceField(widget=forms.Select, choices=wednesday_query_choices)","        thursday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=5)","        thursday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in thursday_query]","        self.fields['thurs_one'] = forms.ChoiceField(widget=forms.Select, choices=thursday_query_choices)","        self.fields['thurs_two'] = forms.ChoiceField(widget=forms.Select, choices=thursday_query_choices)","        friday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=6)","        friday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in friday_query]","        self.fields['fri_one'] = forms.ChoiceField(widget=forms.Select, choices=friday_query_choices)","        self.fields['fri_two'] = forms.ChoiceField(widget=forms.Select, choices=friday_query_choices)","        saturday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=7)","        saturday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in saturday_query]","        self.fields['sat_one'] = forms.ChoiceField(widget=forms.Select, choices=saturday_query_choices)","        self.fields['sat_two'] = forms.ChoiceField(widget=forms.Select, choices=saturday_query_choices)","        sunday_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=1)","        sunday_query_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in sunday_query]","        self.fields['sun_one'] = forms.ChoiceField(widget=forms.Select, choices=sunday_query_choices)","        self.fields['sun_two'] = forms.ChoiceField(widget=forms.Select, choices=sunday_query_choices)","        '''","        self.fields['mon_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=2).values('roster_shift_date'))","        self.fields['mon_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=2).values('roster_shift_date'))","        self.fields['tue_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=3).values('roster_shift_date'))","        self.fields['tue_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=3).values('roster_shift_date'))","        self.fields['wed_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=4).values('roster_shift_date'))","        self.fields['wed_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=4).values('roster_shift_date'))","        self.fields['thurs_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=5).values('roster_shift_date'))","        self.fields['thurs_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=5).values('roster_shift_date'))","        self.fields['fri_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=6).values('roster_shift_date'))","        self.fields['fri_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=6).values('roster_shift_date'))","        self.fields['sat_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=7).values('roster_shift_date'))","        self.fields['sat_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=7).values('roster_shift_date'))","        self.fields['sun_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=1).values('roster_shift_date'))","        self.fields['sun_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=1).values('roster_shift_date'))","        '''","    class Meta:","        model = AvailabilitySheet","        fields = ('mon_one', 'mon_two', 'tue_one', 'tue_two', 'wed_one', 'wed_two', 'thurs_one', 'thurs_two', 'fri_one', 'fri_two', 'sat_one', 'sat_two', 'sun_one', 'sun_two')"],"id":4}],[{"start":{"row":46,"column":8},"end":{"row":61,"column":11},"action":"remove","lines":["'''","        self.fields['mon_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=2).values('roster_shift_date'))","        self.fields['mon_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=2).values('roster_shift_date'))","        self.fields['tue_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=3).values('roster_shift_date'))","        self.fields['tue_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=3).values('roster_shift_date'))","        self.fields['wed_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=4).values('roster_shift_date'))","        self.fields['wed_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=4).values('roster_shift_date'))","        self.fields['thurs_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=5).values('roster_shift_date'))","        self.fields['thurs_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=5).values('roster_shift_date'))","        self.fields['fri_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=6).values('roster_shift_date'))","        self.fields['fri_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=6).values('roster_shift_date'))","        self.fields['sat_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=7).values('roster_shift_date'))","        self.fields['sat_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=7).values('roster_shift_date'))","        self.fields['sun_one'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=1).values('roster_shift_date'))","        self.fields['sun_two'] = forms.ModelChoiceField(widget=forms.Select, queryset=Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gte=next_qtr.qtr_start_date).filter(roster_shift_date__lte=next_qtr.qtr_end_date).filter(roster_shift_date__week_day=1).values('roster_shift_date'))","        '''"],"id":5}],[{"start":{"row":49,"column":175},"end":{"row":50,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":50,"column":0},"end":{"row":50,"column":8},"action":"insert","lines":["        "]},{"start":{"row":50,"column":8},"end":{"row":51,"column":0},"action":"insert","lines":["",""]},{"start":{"row":51,"column":0},"end":{"row":51,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":51,"column":4},"end":{"row":51,"column":8},"action":"remove","lines":["    "],"id":7},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":51,"column":0},"end":{"row":52,"column":0},"action":"insert","lines":["",""],"id":8}],[{"start":{"row":52,"column":0},"end":{"row":61,"column":94},"action":"insert","lines":["class NonScheduledOvertimeRequestForm(forms.ModelForm):","    nsot_date = forms.DateField(required=True, widget=forms.DateInput(attrs={'type': 'date'}))","    nsot_start_time = forms.TimeField(required=True, widget=forms.TimeInput(attrs={'type': 'time'}))","    nsot_end_time = forms.TimeField(required=True, widget=forms.TimeInput(attrs={'type': 'time'}))","    nsot_task = forms.CharField(required=True, widget=forms.Textarea())","    directed_by = forms.ModelChoiceField(widget=forms.Select, queryset=Account.objects.filter(is_staff=True))","    ","    class Meta:","        model = NonScheduledOvertimeRequest","        fields = ('nsot_date', 'nsot_start_time', 'nsot_end_time', 'nsot_task', 'directed_by')"],"id":9}],[{"start":{"row":61,"column":94},"end":{"row":62,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":62,"column":0},"end":{"row":62,"column":8},"action":"insert","lines":["        "]},{"start":{"row":62,"column":8},"end":{"row":63,"column":0},"action":"insert","lines":["",""]},{"start":{"row":63,"column":0},"end":{"row":63,"column":8},"action":"insert","lines":["        "]},{"start":{"row":63,"column":8},"end":{"row":64,"column":0},"action":"insert","lines":["",""]},{"start":{"row":64,"column":0},"end":{"row":64,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":64,"column":4},"end":{"row":64,"column":8},"action":"remove","lines":["    "],"id":11},{"start":{"row":64,"column":0},"end":{"row":64,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":64,"column":0},"end":{"row":76,"column":272},"action":"insert","lines":["class AllowancesRequestForm(forms.ModelForm):","    allow_req_date = forms.DateField(required=True, widget=forms.DateInput(attrs={'type': 'date'}))","    allow_req_task = forms.CharField(required=True, widget=forms.Textarea())","    claiming_breakfast_allowance = forms.BooleanField(required=False, widget=forms.CheckboxInput)","    claiming_dinner_allowance = forms.BooleanField(required=False, widget=forms.CheckboxInput)","    claiming_tea_allowance = forms.BooleanField(required=False, widget=forms.CheckboxInput)","    claiming_plain_clothes_allowance = forms.BooleanField(required=False, widget=forms.CheckboxInput)","    claiming_food_for_prisoner_expense = forms.BooleanField(required=False, widget=forms.CheckboxInput)","    food_for_prisoner_amount = forms.FloatField(required=False, widget=forms.NumberInput)","    ","    class Meta:","        model = AllowancesRequest","        fields = ('allow_req_date', 'allow_req_task', 'claiming_breakfast_allowance', 'claiming_dinner_allowance', 'claiming_tea_allowance', 'claiming_plain_clothes_allowance', 'claiming_food_for_prisoner_expense', 'food_for_prisoner_amount', 'receipt_for_prisoner_food',)"],"id":12}],[{"start":{"row":76,"column":272},"end":{"row":77,"column":0},"action":"insert","lines":["",""],"id":13},{"start":{"row":77,"column":0},"end":{"row":77,"column":8},"action":"insert","lines":["        "]},{"start":{"row":77,"column":8},"end":{"row":78,"column":0},"action":"insert","lines":["",""]},{"start":{"row":78,"column":0},"end":{"row":78,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":78,"column":4},"end":{"row":78,"column":8},"action":"remove","lines":["    "],"id":14},{"start":{"row":78,"column":0},"end":{"row":78,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["",""],"id":15}],[{"start":{"row":79,"column":0},"end":{"row":84,"column":52},"action":"insert","lines":["class RejectAllowanceRequestForm(forms.ModelForm):","    reason_allowance_req_rejected = forms.CharField(required=True, widget=forms.Textarea())","    ","    class Meta:","        model = AllowancesRequest","        fields = ('reason_allowance_req_rejected', )"],"id":16}],[{"start":{"row":84,"column":52},"end":{"row":85,"column":0},"action":"insert","lines":["",""],"id":17},{"start":{"row":85,"column":0},"end":{"row":85,"column":8},"action":"insert","lines":["        "]},{"start":{"row":85,"column":8},"end":{"row":86,"column":0},"action":"insert","lines":["",""]},{"start":{"row":86,"column":0},"end":{"row":86,"column":8},"action":"insert","lines":["        "]},{"start":{"row":86,"column":8},"end":{"row":87,"column":0},"action":"insert","lines":["",""]},{"start":{"row":87,"column":0},"end":{"row":87,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":87,"column":4},"end":{"row":87,"column":8},"action":"remove","lines":["    "],"id":18},{"start":{"row":87,"column":0},"end":{"row":87,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":87,"column":0},"end":{"row":92,"column":43},"action":"insert","lines":["class RejectNSOTForm(forms.ModelForm):","    reason_nsot_rejected = forms.CharField(required=True, widget=forms.Textarea())","    ","    class Meta:","        model = NonScheduledOvertimeRequest","        fields = ('reason_nsot_rejected', )"],"id":19}],[{"start":{"row":92,"column":43},"end":{"row":93,"column":0},"action":"insert","lines":["",""],"id":20},{"start":{"row":93,"column":0},"end":{"row":93,"column":8},"action":"insert","lines":["        "]},{"start":{"row":93,"column":8},"end":{"row":94,"column":0},"action":"insert","lines":["",""]},{"start":{"row":94,"column":0},"end":{"row":94,"column":8},"action":"insert","lines":["        "]},{"start":{"row":94,"column":8},"end":{"row":95,"column":0},"action":"insert","lines":["",""]},{"start":{"row":95,"column":0},"end":{"row":95,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":95,"column":4},"end":{"row":95,"column":8},"action":"remove","lines":["    "],"id":21},{"start":{"row":95,"column":0},"end":{"row":95,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":95,"column":0},"end":{"row":96,"column":104},"action":"insert","lines":["class AssignOvertimeDateForm(forms.Form):","    date_for_assignment = forms.DateField(required=True, widget=forms.DateInput(attrs={'type': 'date'}))"],"id":22}],[{"start":{"row":96,"column":104},"end":{"row":97,"column":0},"action":"insert","lines":["",""],"id":23},{"start":{"row":97,"column":0},"end":{"row":97,"column":4},"action":"insert","lines":["    "]},{"start":{"row":97,"column":4},"end":{"row":98,"column":0},"action":"insert","lines":["",""]},{"start":{"row":98,"column":0},"end":{"row":98,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":98,"column":0},"end":{"row":98,"column":4},"action":"remove","lines":["    "],"id":24}],[{"start":{"row":98,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["",""],"id":25}],[{"start":{"row":99,"column":0},"end":{"row":154,"column":111},"action":"insert","lines":["class AssignRecallStaffForm(forms.Form):","    def __init__(self, *args, **kwargs):","        super(AssignRecallStaffForm, self).__init__(*args, **kwargs)","        initial_arguments = kwargs.get('initial', None)","        selected_dat = initial_arguments.get('selected_date', None)","        #print(selected_dat)","        #print(type(selected_dat))","        selected_date_1 = datetime.strptime(selected_dat, \"%Y-%m-%d\")","        #print(selected_date_1)","        #print(type(selected_date_1))","        selected_date = dt.date(selected_date_1.year, selected_date_1.month, selected_date_1.day)","        #print(selected_date)","        #print(type(selected_date))","        qtr = getQtrDateIn(selected_date)","        #selected_date = args.chosen_date","        self.fields['selected_date'] = forms.DateField(disabled=True)","        ","        if selected_date.strftime(\"%A\") == \"Monday\":","            mon_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(mon_one__contains=selected_date) | Q(mon_two__contains=selected_date))","            #, mon_two__contains=selected_date","            #mon_off_query = mon_query.objects.values('avail_sheet_off_id')","            mon_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in mon_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=mon_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Tuesday\":","            tue_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(tue_one__contains=selected_date) | Q(tue_two__contains=selected_date))","            #tue_off_query = tue_query.objects.values('avail_sheet_off_id')","            tue_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in tue_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=tue_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Wednesday\":","            wed_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(wed_one__contains=selected_date) | Q(wed_two__contains=selected_date))","            #wed_off_query = wed_query.objects.values('avail_sheet_off_id')","            wed_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in wed_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=wed_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Thursday\":","            thurs_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(thurs_one__contains=selected_date) | Q(thurs_two__contains=selected_date))","            print(thurs_query)","            #thurs_off_query = thurs_query.objects.values('avail_sheet_off_id')","            thurs_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in thurs_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=thurs_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Friday\":","            fri_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(fri_one__contains=selected_date) | Q(fri_two__contains=selected_date))","            #fri_off_query = fri_query.objects.values('avail_sheet_off_id')","            fri_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in fri_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=fri_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Saturday\":","            sat_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(sat_one__contains=selected_date) | Q(sat_two__contains=selected_date))","            #sat_off_query = sat_query.objects.values('avail_sheet_off_id')","            sat_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in sat_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=sat_off_query_choices)    ","        elif selected_date.strftime(\"%A\") == \"Sunday\":","            sun_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(sun_one__contains=selected_date) | Q(sun_two__contains=selected_date))","            #sun_off_query = sun_query.objects.values('avail_sheet_off_id')","            sun_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in sun_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=sun_off_query_choices)","        ","        self.fields['assign_shift'] = forms.ModelChoiceField(widget=forms.Select, queryset=Shift.objects.all())"],"id":26}],[{"start":{"row":154,"column":111},"end":{"row":155,"column":0},"action":"insert","lines":["",""],"id":27},{"start":{"row":155,"column":0},"end":{"row":155,"column":8},"action":"insert","lines":["        "]},{"start":{"row":155,"column":8},"end":{"row":156,"column":0},"action":"insert","lines":["",""]},{"start":{"row":156,"column":0},"end":{"row":156,"column":8},"action":"insert","lines":["        "]},{"start":{"row":156,"column":8},"end":{"row":157,"column":0},"action":"insert","lines":["",""]},{"start":{"row":157,"column":0},"end":{"row":157,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":157,"column":4},"end":{"row":157,"column":8},"action":"remove","lines":["    "],"id":28},{"start":{"row":157,"column":0},"end":{"row":157,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":157,"column":0},"end":{"row":171,"column":119},"action":"insert","lines":["class AssignRequireStaffForm(forms.Form):","   def __init__(self, *args, **kwargs):","        super(AssignRequireStaffForm, self).__init__(*args, **kwargs)","        initial_arguments = kwargs.get('initial', None)","        selected_date_as_string = initial_arguments.get('selected_require_date', None)","        selected_date_as_dt_obj = datetime.strptime(selected_date_as_string, \"%Y-%m-%d\")","        selected_require_date = dt.date(selected_date_as_dt_obj.year, selected_date_as_dt_obj.month, selected_date_as_dt_obj.day)","        ","        self.fields['selected_require_date'] = forms.DateField(disabled=True)","        ","        officers_that_can_be_required = Roster.objects.filter(roster_shift_date__contains=selected_require_date).filter(roster_due_on=False)","        off_to_require_query_choices = [('', 'select staff member to require')] + [(id.roster_officer_id, id.roster_officer_id) for id in officers_that_can_be_required]","        self.fields['officers_for_require'] = forms.ChoiceField(widget=forms.Select, choices=off_to_require_query_choices)","        ","        self.fields['assign_require_shift'] = forms.ModelChoiceField(widget=forms.Select, queryset=Shift.objects.all())"],"id":29}],[{"start":{"row":99,"column":0},"end":{"row":154,"column":111},"action":"remove","lines":["class AssignRecallStaffForm(forms.Form):","    def __init__(self, *args, **kwargs):","        super(AssignRecallStaffForm, self).__init__(*args, **kwargs)","        initial_arguments = kwargs.get('initial', None)","        selected_dat = initial_arguments.get('selected_date', None)","        #print(selected_dat)","        #print(type(selected_dat))","        selected_date_1 = datetime.strptime(selected_dat, \"%Y-%m-%d\")","        #print(selected_date_1)","        #print(type(selected_date_1))","        selected_date = dt.date(selected_date_1.year, selected_date_1.month, selected_date_1.day)","        #print(selected_date)","        #print(type(selected_date))","        qtr = getQtrDateIn(selected_date)","        #selected_date = args.chosen_date","        self.fields['selected_date'] = forms.DateField(disabled=True)","        ","        if selected_date.strftime(\"%A\") == \"Monday\":","            mon_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(mon_one__contains=selected_date) | Q(mon_two__contains=selected_date))","            #, mon_two__contains=selected_date","            #mon_off_query = mon_query.objects.values('avail_sheet_off_id')","            mon_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in mon_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=mon_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Tuesday\":","            tue_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(tue_one__contains=selected_date) | Q(tue_two__contains=selected_date))","            #tue_off_query = tue_query.objects.values('avail_sheet_off_id')","            tue_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in tue_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=tue_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Wednesday\":","            wed_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(wed_one__contains=selected_date) | Q(wed_two__contains=selected_date))","            #wed_off_query = wed_query.objects.values('avail_sheet_off_id')","            wed_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in wed_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=wed_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Thursday\":","            thurs_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(thurs_one__contains=selected_date) | Q(thurs_two__contains=selected_date))","            print(thurs_query)","            #thurs_off_query = thurs_query.objects.values('avail_sheet_off_id')","            thurs_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in thurs_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=thurs_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Friday\":","            fri_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(fri_one__contains=selected_date) | Q(fri_two__contains=selected_date))","            #fri_off_query = fri_query.objects.values('avail_sheet_off_id')","            fri_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in fri_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=fri_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Saturday\":","            sat_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(sat_one__contains=selected_date) | Q(sat_two__contains=selected_date))","            #sat_off_query = sat_query.objects.values('avail_sheet_off_id')","            sat_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in sat_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=sat_off_query_choices)    ","        elif selected_date.strftime(\"%A\") == \"Sunday\":","            sun_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(sun_one__contains=selected_date) | Q(sun_two__contains=selected_date))","            #sun_off_query = sun_query.objects.values('avail_sheet_off_id')","            sun_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in sun_query]","            self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=sun_off_query_choices)","        ","        self.fields['assign_shift'] = forms.ModelChoiceField(widget=forms.Select, queryset=Shift.objects.all())"],"id":30},{"start":{"row":99,"column":0},"end":{"row":191,"column":115},"action":"insert","lines":["class AssignRecallStaffForm(forms.Form):","    def __init__(self, *args, **kwargs):","        initial_arguments = kwargs.get('initial', None)","        updated_initial = {}","        selected_dat = initial_arguments.get('selected_date', None)","        selected_date_1 = datetime.strptime(selected_dat, \"%Y-%m-%d\")","        selected_date = dt.date(selected_date_1.year, selected_date_1.month, selected_date_1.day)","        updated_initial['selected_date'] = selected_date","        kwargs.update(initial=updated_initial)","        ","        super(AssignRecallStaffForm, self).__init__(*args, **kwargs)","        qtr = getQtrDateIn(selected_date)","        no_staff_available_for_selected_date = False","        ","        self.fields['selected_date'] = forms.DateField(disabled=True)","        ","        if selected_date.strftime(\"%A\") == \"Monday\":","            mon_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(mon_one__contains=selected_date) | Q(mon_two__contains=selected_date))","            #, mon_two__contains=selected_date","            #mon_off_query = mon_query.objects.values('avail_sheet_off_id')","            length_mon_query = len(mon_query)","            if length_mon_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                mon_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in mon_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=mon_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Tuesday\":","            tue_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(tue_one__contains=selected_date) | Q(tue_two__contains=selected_date))","            #tue_off_query = tue_query.objects.values('avail_sheet_off_id')","            length_tue_query = len(tue_query)","            if length_tue_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                tue_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in tue_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=tue_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Wednesday\":","            wed_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(wed_one__contains=selected_date) | Q(wed_two__contains=selected_date))","            #wed_off_query = wed_query.objects.values('avail_sheet_off_id')","            length_wed_query = len(wed_query)","            if length_wed_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                wed_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in wed_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=wed_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Thursday\":","            thurs_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(thurs_one__contains=selected_date) | Q(thurs_two__contains=selected_date))","            #print(thurs_query)","            #thurs_off_query = thurs_query.objects.values('avail_sheet_off_id')","            length_thurs_query = len(thurs_query)","            if length_thurs_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                thurs_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in thurs_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=thurs_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Friday\":","            fri_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(fri_one__contains=selected_date) | Q(fri_two__contains=selected_date))","            #fri_off_query = fri_query.objects.values('avail_sheet_off_id')","            length_fri_query = len(fri_query)","            if length_fri_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                fri_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in fri_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=fri_off_query_choices)","        elif selected_date.strftime(\"%A\") == \"Saturday\":","            sat_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(sat_one__contains=selected_date) | Q(sat_two__contains=selected_date))","            #sat_off_query = sat_query.objects.values('avail_sheet_off_id')","            length_sat_query = len(sat_query)","            if length_sat_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                sat_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in sat_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=sat_off_query_choices)    ","        elif selected_date.strftime(\"%A\") == \"Sunday\":","            sun_query = AvailabilitySheet.objects.filter(avail_sheet_qtr_id=qtr).filter(Q(sun_one__contains=selected_date) | Q(sun_two__contains=selected_date))","            #sun_off_query = sun_query.objects.values('avail_sheet_off_id')","            length_sun_query = len(sun_query)","            if length_sun_query == 0:","                no_staff_available_for_selected_date = True","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, disabled=True, help_text=\"No staff have made themselves available for \" + str(selected_date) + \".\")","            else:","                sun_off_query_choices = [('', 'select available staff member')] + [(id.avail_sheet_off_id, id.avail_sheet_off_id) for id in sun_query]","                self.fields['officers_available'] = forms.ChoiceField(widget=forms.Select, choices=sun_off_query_choices)","        ","        if no_staff_available_for_selected_date == True:","            self.fields['assign_shift'] = forms.ChoiceField(widget=forms.Select, disabled=True)","        else:","            self.fields['assign_shift'] = forms.ModelChoiceField(widget=forms.Select, queryset=Shift.objects.all())"]}],[{"start":{"row":117,"column":12},"end":{"row":118,"column":75},"action":"remove","lines":["#, mon_two__contains=selected_date","            #mon_off_query = mon_query.objects.values('avail_sheet_off_id')"],"id":31},{"start":{"row":117,"column":8},"end":{"row":117,"column":12},"action":"remove","lines":["    "]},{"start":{"row":117,"column":4},"end":{"row":117,"column":8},"action":"remove","lines":["    "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":4},"action":"remove","lines":["    "]},{"start":{"row":116,"column":160},"end":{"row":117,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":122,"column":47},"end":{"row":122,"column":48},"action":"remove","lines":["s"],"id":32}],[{"start":{"row":122,"column":47},"end":{"row":122,"column":48},"action":"insert","lines":["S"],"id":33}],[{"start":{"row":126,"column":12},"end":{"row":126,"column":75},"action":"remove","lines":["#tue_off_query = tue_query.objects.values('avail_sheet_off_id')"],"id":34},{"start":{"row":126,"column":8},"end":{"row":126,"column":12},"action":"remove","lines":["    "]},{"start":{"row":126,"column":4},"end":{"row":126,"column":8},"action":"remove","lines":["    "]},{"start":{"row":126,"column":0},"end":{"row":126,"column":4},"action":"remove","lines":["    "]},{"start":{"row":125,"column":160},"end":{"row":126,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":131,"column":47},"end":{"row":131,"column":48},"action":"remove","lines":["s"],"id":35}],[{"start":{"row":131,"column":47},"end":{"row":131,"column":48},"action":"insert","lines":["S"],"id":36}],[{"start":{"row":135,"column":12},"end":{"row":135,"column":75},"action":"remove","lines":["#wed_off_query = wed_query.objects.values('avail_sheet_off_id')"],"id":37},{"start":{"row":135,"column":8},"end":{"row":135,"column":12},"action":"remove","lines":["    "]},{"start":{"row":135,"column":4},"end":{"row":135,"column":8},"action":"remove","lines":["    "]},{"start":{"row":135,"column":0},"end":{"row":135,"column":4},"action":"remove","lines":["    "]},{"start":{"row":134,"column":160},"end":{"row":135,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":140,"column":47},"end":{"row":140,"column":48},"action":"remove","lines":["s"],"id":38}],[{"start":{"row":140,"column":47},"end":{"row":140,"column":48},"action":"insert","lines":["S"],"id":39}],[{"start":{"row":144,"column":12},"end":{"row":145,"column":79},"action":"remove","lines":["#print(thurs_query)","            #thurs_off_query = thurs_query.objects.values('avail_sheet_off_id')"],"id":40},{"start":{"row":144,"column":8},"end":{"row":144,"column":12},"action":"remove","lines":["    "]},{"start":{"row":144,"column":4},"end":{"row":144,"column":8},"action":"remove","lines":["    "]},{"start":{"row":144,"column":0},"end":{"row":144,"column":4},"action":"remove","lines":["    "]},{"start":{"row":143,"column":166},"end":{"row":144,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":149,"column":49},"end":{"row":149,"column":50},"action":"remove","lines":["s"],"id":41}],[{"start":{"row":149,"column":49},"end":{"row":149,"column":50},"action":"insert","lines":["S"],"id":42}],[{"start":{"row":153,"column":12},"end":{"row":153,"column":75},"action":"remove","lines":["#fri_off_query = fri_query.objects.values('avail_sheet_off_id')"],"id":43},{"start":{"row":153,"column":8},"end":{"row":153,"column":12},"action":"remove","lines":["    "]},{"start":{"row":153,"column":4},"end":{"row":153,"column":8},"action":"remove","lines":["    "]},{"start":{"row":153,"column":0},"end":{"row":153,"column":4},"action":"remove","lines":["    "]},{"start":{"row":152,"column":160},"end":{"row":153,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":162,"column":12},"end":{"row":162,"column":75},"action":"remove","lines":["#sat_off_query = sat_query.objects.values('avail_sheet_off_id')"],"id":44},{"start":{"row":162,"column":8},"end":{"row":162,"column":12},"action":"remove","lines":["    "]},{"start":{"row":162,"column":4},"end":{"row":162,"column":8},"action":"remove","lines":["    "]},{"start":{"row":162,"column":0},"end":{"row":162,"column":4},"action":"remove","lines":["    "]},{"start":{"row":161,"column":160},"end":{"row":162,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":158,"column":47},"end":{"row":158,"column":48},"action":"remove","lines":["s"],"id":45}],[{"start":{"row":158,"column":47},"end":{"row":158,"column":48},"action":"insert","lines":["S"],"id":46}],[{"start":{"row":167,"column":47},"end":{"row":167,"column":48},"action":"remove","lines":["s"],"id":47}],[{"start":{"row":167,"column":47},"end":{"row":167,"column":48},"action":"insert","lines":["S"],"id":48}],[{"start":{"row":171,"column":12},"end":{"row":171,"column":75},"action":"remove","lines":["#sun_off_query = sun_query.objects.values('avail_sheet_off_id')"],"id":49},{"start":{"row":171,"column":8},"end":{"row":171,"column":12},"action":"remove","lines":["    "]},{"start":{"row":171,"column":4},"end":{"row":171,"column":8},"action":"remove","lines":["    "]},{"start":{"row":171,"column":0},"end":{"row":171,"column":4},"action":"remove","lines":["    "]},{"start":{"row":170,"column":160},"end":{"row":171,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":176,"column":47},"end":{"row":176,"column":48},"action":"remove","lines":["s"],"id":50}],[{"start":{"row":176,"column":47},"end":{"row":176,"column":48},"action":"insert","lines":["S"],"id":51}],[{"start":{"row":185,"column":0},"end":{"row":199,"column":119},"action":"remove","lines":["class AssignRequireStaffForm(forms.Form):","   def __init__(self, *args, **kwargs):","        super(AssignRequireStaffForm, self).__init__(*args, **kwargs)","        initial_arguments = kwargs.get('initial', None)","        selected_date_as_string = initial_arguments.get('selected_require_date', None)","        selected_date_as_dt_obj = datetime.strptime(selected_date_as_string, \"%Y-%m-%d\")","        selected_require_date = dt.date(selected_date_as_dt_obj.year, selected_date_as_dt_obj.month, selected_date_as_dt_obj.day)","        ","        self.fields['selected_require_date'] = forms.DateField(disabled=True)","        ","        officers_that_can_be_required = Roster.objects.filter(roster_shift_date__contains=selected_require_date).filter(roster_due_on=False)","        off_to_require_query_choices = [('', 'select staff member to require')] + [(id.roster_officer_id, id.roster_officer_id) for id in officers_that_can_be_required]","        self.fields['officers_for_require'] = forms.ChoiceField(widget=forms.Select, choices=off_to_require_query_choices)","        ","        self.fields['assign_require_shift'] = forms.ModelChoiceField(widget=forms.Select, queryset=Shift.objects.all())"],"id":52},{"start":{"row":185,"column":0},"end":{"row":208,"column":119},"action":"insert","lines":["class AssignRequireStaffForm(forms.Form):","   def __init__(self, *args, **kwargs):","        '''super(AssignRequireStaffForm, self).__init__(*args, **kwargs)","        initial_arguments = kwargs.get('initial', None)","        selected_date_as_string = initial_arguments.get('selected_require_date', None)","        selected_date_as_dt_obj = datetime.strptime(selected_date_as_string, \"%Y-%m-%d\")","        selected_require_date = dt.date(selected_date_as_dt_obj.year, selected_date_as_dt_obj.month, selected_date_as_dt_obj.day)","        '''","        initial_arguments = kwargs.get('initial', None)","        updated_initial = {}","        selected_date_as_string = initial_arguments.get('selected_require_date', None)","        selected_date_as_dt_obj = datetime.strptime(selected_date_as_string, \"%Y-%m-%d\")","        selected_require_date = dt.date(selected_date_as_dt_obj.year, selected_date_as_dt_obj.month, selected_date_as_dt_obj.day)","        updated_initial['selected_require_date'] = selected_require_date","        kwargs.update(initial=updated_initial)","        super(AssignRequireStaffForm, self).__init__(*args, **kwargs)","        ","        self.fields['selected_require_date'] = forms.DateField(disabled=True)","        ","        officers_that_can_be_required = Roster.objects.filter(roster_shift_date__contains=selected_require_date).filter(roster_due_on=False)","        off_to_require_query_choices = [('', 'select staff member to require')] + [(id.roster_officer_id, id.roster_officer_id) for id in officers_that_can_be_required]","        self.fields['officers_for_require'] = forms.ChoiceField(widget=forms.Select, choices=off_to_require_query_choices)","        ","        self.fields['assign_require_shift'] = forms.ModelChoiceField(widget=forms.Select, queryset=Shift.objects.all())"]}],[{"start":{"row":187,"column":8},"end":{"row":192,"column":11},"action":"remove","lines":["'''super(AssignRequireStaffForm, self).__init__(*args, **kwargs)","        initial_arguments = kwargs.get('initial', None)","        selected_date_as_string = initial_arguments.get('selected_require_date', None)","        selected_date_as_dt_obj = datetime.strptime(selected_date_as_string, \"%Y-%m-%d\")","        selected_require_date = dt.date(selected_date_as_dt_obj.year, selected_date_as_dt_obj.month, selected_date_as_dt_obj.day)","        '''"],"id":53},{"start":{"row":187,"column":4},"end":{"row":187,"column":8},"action":"remove","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"remove","lines":["    "]},{"start":{"row":186,"column":39},"end":{"row":187,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":202,"column":119},"end":{"row":203,"column":0},"action":"insert","lines":["",""],"id":54},{"start":{"row":203,"column":0},"end":{"row":203,"column":8},"action":"insert","lines":["        "]},{"start":{"row":203,"column":8},"end":{"row":204,"column":0},"action":"insert","lines":["",""]},{"start":{"row":204,"column":0},"end":{"row":204,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":204,"column":4},"end":{"row":204,"column":8},"action":"remove","lines":["    "],"id":55},{"start":{"row":204,"column":0},"end":{"row":204,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":204,"column":0},"end":{"row":219,"column":43},"action":"insert","lines":["class ShortTermAvailabilityForm(forms.ModelForm):","    def __init__(self, *args, **kwargs):","        super(ShortTermAvailabilityForm, self).__init__(*args, **kwargs)","        user_as_simpleLazyObject = get_current_user()","        user = Account.objects.get(pk=user_as_simpleLazyObject.id)","        todays_date = dt.date.today()","        thirteen_day_delta = dt.timedelta(days=13)","        short_term_window_end = todays_date + thirteen_day_delta","        ","        short_term_days_query = Roster.objects.filter(roster_officer_id=user).filter(roster_due_on=False).filter(roster_shift_date__gt=todays_date).filter(roster_shift_date__lte=short_term_window_end)","        short_term_availability_choices = [('', 'select date')] + [(id.roster_shift_date.strftime(\"%Y-%m-%d\"), id.roster_shift_date.strftime(\"%Y-%m-%d\")) for id in short_term_days_query]","        self.fields['st_availability_date'] = forms.ChoiceField(widget=forms.Select, choices=short_term_availability_choices)","        ","    class Meta:","        model = ShortTermAvailabilty","        fields = ('st_availability_date', )"],"id":56}],[{"start":{"row":2,"column":85},"end":{"row":2,"column":86},"action":"insert","lines":[","],"id":57}],[{"start":{"row":2,"column":86},"end":{"row":2,"column":87},"action":"insert","lines":[" "],"id":58}],[{"start":{"row":2,"column":87},"end":{"row":2,"column":107},"action":"insert","lines":["ShortTermAvailabilty"],"id":59}]]},"ace":{"folds":[],"scrolltop":2425.5,"scrollleft":0,"selection":{"start":{"row":2,"column":107},"end":{"row":2,"column":107},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":474,"mode":"ace/mode/python"}},"timestamp":1614947571625,"hash":"33a3cca0c60f42ad52aca0e7f81824f32af920cd"}